<h2>we need to 20  bytes of password that is equal to a hexcode</h2>

Let’s try something banal: a = b = c = d = 0x41414141 . We then use Python to compute:
e = (0x21DD09EC - 4*0x41414141)% 2**32
This returns the number 483919080 , or 0x1cd804e8 in hexadecimal (we can ask Python to compute this for us by issuing
the command hex(e) ). We got lucky on our first try: the resulting value of e does not contain any problematic bytes. We now
compose our crafted password in hexadecimal:
00: 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41
10: e8 04 d8 1c
And issue the command: xxd -r pass.hex > pass
This writes the password to the file pass . Run col with the contents of pass as the first parameter:
18./col ‘cat pass‘





-m32 to complile woth 32 bit lobraries


The stack is divided into ”frames”, starting at the top of the stack. Each frame is associated with a function. The top
frame is associated with the function currently executing, f 0 . The frame below it is associated with f 1 , the function that
called f 0 . The frame below that is associated with f 2 , the function that called f 1 . And so on.
• esp has the address of the top of the current stack frame (that’s the top of the stack in general); ebp has the address
of the bottom of the current stack frame.
• From the top of the current stack frame going down, we have: a space for local variables; a backup of the ebp value for
f 1 ; a backup of where to resume execution in f 1 once f 0 returns; the arguments that f 1 supplied to f 0 , in the order that
they appear in f 0 ’s signature.
